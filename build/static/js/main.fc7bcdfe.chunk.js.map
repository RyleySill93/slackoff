{"version":3,"sources":["App.js","serviceWorker.js","index.js","khaled.png"],"names":["App","require","React","Component","state","url","file","style","fileUrl","loading","imageUrls","getContent","doStuff","_this3","setState","formData","FormData","append","name","axios","post","concat","window","location","origin","then","res","data","finally","react_default","a","createElement","Fragment","className","height","src","width","onClick","_this4","this","fetch","response","blob","blobResponse","URL","webkitURL","createObjectURL","get","catch","err","_this5","openDialog","document","getElementById","click","react_router_dom","to","type","id","hidden","onChange","event","target","files","value","lib_default","map","Boolean","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fc7bcdfe.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Dropzone from 'react-dropzone'\nimport { BrowserRouter as Router, Route, Link, withRouter } from \"react-router-dom\";\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Masonry from 'react-masonry-component';\nvar Jimp = require('jimp');\n\n\nclass meow extends React.Component {\n    state = {\n        url: '',\n        file: null,\n        style: 'intensify',\n        fileUrl: '',\n        loading: false,\n    };\n\n    getContent = () => {\n        const doStuff = () => {\n            if (!this.state.file) return;\n            this.setState({ loading: true });\n            const formData = new FormData();\n            formData.append(\"file\", this.state.file, this.state.file.name);\n            axios.post(`${window.location.origin}/${this.state.style}/`, formData).then(res => {\n                this.setState({ url: res.data.url })\n            })\n                .finally(() => this.setState({ loading: false }));\n        };\n\n        if (this.state.loading) {\n            return (\n                <React.Fragment>\n                    <div/>\n                    <div className=\"loader\">Loading...</div>\n                    <div/>\n                </React.Fragment>\n            )\n        } else if (this.state.url) {\n            return (\n                <React.Fragment>\n                    <div/>\n                    <img style={{ height: 200 }} src={this.state.url} />\n                    <div className=\"another-one\">\n                        <img className=\"dj-khaled\" style={{ width: 100 }} src={require('./khaled.png')} />\n                        <button className=\"button\" onClick={doStuff}>ANOTHER ONE</button>\n                    </div>\n                </React.Fragment>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <div/>\n                <button className=\"button\" onClick={doStuff}>CLICK ME</button>\n                <div/>\n            </React.Fragment>\n        )\n    }\n\n    render() {\n        const uploadFile = (file) => {\n            this.setState({ file, fileUrl: URL.createObjectURL(file) });\n        };\n\n        function openDialog() {\n          document.getElementById('upload-photo').click();\n        }\n\n        const app = (\n            <main className=\"App-main\">\n                <div className=\"column\">\n                    <div className=\"step\">1. UPLOAD FACE</div>\n                    <Link className=\"caption\" to=\"/how-to-cut-out-a-face\">how do I get a face cutout from a picture?</Link>\n                    <div className=\"button-holder\">\n                        <input type=\"file\" id=\"upload-photo\" hidden onChange={event => uploadFile(event.target.files[0])} />\n                        {\n                            this.state.file ? (\n                                <React.Fragment>\n                                    <div/>\n                                    <img style={{ height: 200 }} src={this.state.fileUrl} />\n                                    <button className=\"button\" onClick={openDialog}>SEND PICS? ;)</button>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    <div/>\n                                    <button className=\"button\" onClick={openDialog}>SEND PICS? ;)</button>\n                                    <div/>\n                                </React.Fragment>\n                            )\n                        }\n                    </div>\n                </div>\n                <div className=\"column column-middle\">\n                    <div className=\"step\">2. SELECT STYLE</div>\n                    <small>&nbsp;</small>\n                    <div className=\"button-holder\">\n                        <div/>\n                        <select className=\"button\" value={this.state.style} onChange={event => this.setState({ style: event.target.value })}>\n                            <option value=\"bobblify\">:BOBBLE:</option>\n                            <option value=\"intensify\">:INTENSIFY:</option>\n                            <option value=\"detective\">:DETECTIVE:</option>\n                            <option value=\"appears\">:APPEARS:</option>\n                            <option value=\"disappears\">:DISAPPEARS:</option>\n                            <option value=\"carlton_dance\">:CARLTON:</option>\n                            <option value=\"rap_battle\">:RAP_BATTLE:</option>\n                            <option value=\"strut\">:STRUT:</option>\n                            <option value=\"trapped\">:LET_ME_IN:</option>\n                            <option value=\"wrecking-ball\">:WRECKING_BALL:</option>\n                            <option value=\"heres-johnny\">:HERES_JOHNNY:</option>\n                            <option value=\"javert\">:JAVERT:</option>\n                            <option value=\"time\">:TIME:</option>\n                            <option value=\"left-hanging\">:LEFT_HANGING:</option>\n                            <option value=\"thinking\">:THINKING:</option>\n                            <option value=\"trump\">:TRUMP:</option>\n                            <option value=\"hide\">:HIDE:</option>\n                            <option value=\"begging\">:BEGGING:</option>\n                            <option value=\"chimp\">:CHIMP:</option>\n                            <option value=\"fire\">:FIRE:</option>\n                            <option value=\"computer_kid\">:COMPUTER_KID:</option>\n                            <option value=\"toast\">:TOAST:</option>\n                            <option value=\"clapping\">:CLAPPING:</option>\n                            <option value=\"mind_blown\">:MIND_BLOWN:</option>\n                        </select>\n                        <div/>\n                    </div>\n                </div>\n                <div className=\"column\">\n                    <div className=\"step\">3. GENERATE EMOJI</div>\n                    <Link className=\"caption\" to=\"/how-to-upload-an-emoji\">how do I upload an emoji to slack?</Link>\n                    <div className=\"button-holder\">\n                        { this.getContent() }\n                    </div>\n                </div>\n            </main>\n        );\n\n        const howtoface = (\n            <main className=\"help-section\">\n                <img className=\"gif\" src=\"http://i.imgur.com/DHRYpiZ.gif\" />\n                <div className=\"section-title\">\n                    How to cut out a face from a picture\n                </div>\n                <ol>\n                    <li>\n                        Open up your picture in Preview. If you don't have a Mac, start <a href=\"https://www.apple.com/shop/buy-mac/macbook-pro\">here.</a>\n                    </li>\n                    <li>\n                        Click on the toolbox or pen button the upper right hand corner, then select the lasso tool.\n                    </li>\n                    <img className=\"gif\" src=\"https://media.giphy.com/media/hqljpSlE9NWsCqO94Q/giphy.gif\" />\n                    <li>\n                        Carefully cut the face out of the picture. When you're done, click crop and convert.\n                    </li>\n                    <img className=\"gif\" src=\"https://media.giphy.com/media/dxTpaE9A6TXGdRXb9u/giphy.gif\" />\n                </ol>\n            </main>\n        );\n\n\n        const howtoemoji = (\n            <main className=\"help-section\">\n                <img className=\"gif\" src=\"https://media.giphy.com/media/iJIkiyiuGQA81nqOpF/giphy.gif\" />\n                <div className=\"section-title\">\n                    How to upload an emoji to slack\n                </div>\n\n            </main>\n        );\n\n        return (\n            <Router>\n              <div className=\"App\">\n                <header className=\"header\">\n                    <Link className=\"title\" to=\"/\">\n                        slackoff.\n                    </Link>\n                </header>\n                <Route exact path=\"/\" component={() => app} />\n                <Route path=\"/how-to-cut-out-a-face\" component={ () => howtoface} />\n                <Route path=\"/how-to-upload-an-emoji\" component={ () => howtoemoji} />\n              </div>\n            </Router>\n        )\n    }\n}\n\n\nclass App extends React.Component {\n    state = {\n        url: '',\n        file: true,\n        style: 'intensify',\n        fileUrl: '',\n        loading: false,\n        imageUrls: [],\n    };\n\n    getContent = () => {\n        const doStuff = () => {\n            if (!this.state.file) return;\n            this.setState({ loading: true });\n            const formData = new FormData();\n            formData.append(\"file\", this.state.file, this.state.file.name);\n            axios.post(`${window.location.origin}/${this.state.style}/`, formData).then(res => {\n                this.setState({ url: res.data.url })\n            })\n                .finally(() => this.setState({ loading: false }));\n        };\n\n        if (this.state.loading) {\n            return (\n                <React.Fragment>\n                    <div/>\n                    <div className=\"loader\">Loading...</div>\n                    <div/>\n                </React.Fragment>\n            )\n        } else if (this.state.url) {\n            return (\n                <React.Fragment>\n                    <div/>\n                    <img style={{ height: 200 }} src={this.state.url} />\n                    <div className=\"another-one\">\n                        <img className=\"dj-khaled\" style={{ width: 100 }} src={require('./khaled.png')} />\n                        <button className=\"button\" onClick={doStuff}>ANOTHER ONE</button>\n                    </div>\n                </React.Fragment>\n            )\n        }\n\n        return (\n            <React.Fragment>\n                <div/>\n                <button className=\"button\" onClick={doStuff}>CLICK ME</button>\n                <div/>\n            </React.Fragment>\n        )\n    }\n\n    componentDidMount(){\n        fetch('https://i.imgur.com/LuF7JAs.png?1').then(response => {\n          response.blob().then(blobResponse => {\n            const urlCreator = window.URL || window.webkitURL;\n            const fileUrl = urlCreator.createObjectURL(blobResponse);\n            this.setState({fileUrl})\n          })\n        })\n\n        axios.get('http://localhost:8000/gifs/').then(res => {\n            this.setState({imageUrls: res.data})\n        }).catch(err => {\n            debugger\n        })\n    }\n\n    render() {\n        const uploadFile = (file) => {\n            this.setState({ file, fileUrl: URL.createObjectURL(file) });\n        };\n\n        function openDialog() {\n          document.getElementById('upload-photo').click();\n        }\n\n        const rotate = () => {\n            Jimp.read(this.state.fileUrl)\n            .then(image => {\n                debugger\n                image.rotate(30).getBase64(Jimp.AUTO, (err, res) => {\n                    this.setState({fileUrl: res})\n                console.log(res)\n              })\n                debugger\n            })\n            .catch(err => {\n                debugger\n            })\n        }\n\n        const app = (\n            <main className=\"App-main\">\n                <div className=\"column\">\n                    <div className=\"step\">1. UPLOAD FACE</div>\n                    <Link className=\"caption\" to=\"/how-to-cut-out-a-face\">how do I get a face cutout from a picture?</Link>\n                    <div className=\"button-holder\">\n                        <input type=\"file\" id=\"upload-photo\" hidden onChange={event => uploadFile(event.target.files[0])} />\n                        {\n                            this.state.file ? (\n                                <React.Fragment>\n                                    <div/>\n                                    <img style={{ height: 200 }} src={this.state.fileUrl} />\n                                    <button className=\"button\" onClick={openDialog}>SEND PICS? ;)</button>\n                                </React.Fragment>\n                            ) : (\n                                <React.Fragment>\n                                    <div/>\n                                    <button className=\"button\" onClick={openDialog}>SEND PICS? ;)</button>\n                                    <div/>\n                                </React.Fragment>\n                            )\n                        }\n                    </div>\n                </div>\n                <div className=\"column column-middle\">\n                    <div className=\"step\">2. SELECT STYLE</div>\n                    <small>&nbsp;</small>\n                    <div className=\"button-holder\">\n                        <div/>\n                        <select className=\"button\" value={this.state.style} onChange={event => this.setState({ style: event.target.value })}>\n                            <option value=\"bobblify\">:BOBBLE:</option>\n                            <option value=\"intensify\">:INTENSIFY:</option>\n                            <option value=\"detective\">:DETECTIVE:</option>\n                            <option value=\"appears\">:APPEARS:</option>\n                            <option value=\"disappears\">:DISAPPEARS:</option>\n                            <option value=\"carlton_dance\">:CARLTON:</option>\n                            <option value=\"rap_battle\">:RAP_BATTLE:</option>\n                            <option value=\"strut\">:STRUT:</option>\n                            <option value=\"trapped\">:LET_ME_IN:</option>\n                            <option value=\"wrecking-ball\">:WRECKING_BALL:</option>\n                            <option value=\"heres-johnny\">:HERES_JOHNNY:</option>\n                            <option value=\"javert\">:JAVERT:</option>\n                            <option value=\"time\">:TIME:</option>\n                            <option value=\"left-hanging\">:LEFT_HANGING:</option>\n                            <option value=\"thinking\">:THINKING:</option>\n                            <option value=\"trump\">:TRUMP:</option>\n                            <option value=\"hide\">:HIDE:</option>\n                            <option value=\"begging\">:BEGGING:</option>\n                            <option value=\"chimp\">:CHIMP:</option>\n                            <option value=\"fire\">:FIRE:</option>\n                            <option value=\"computer_kid\">:COMPUTER_KID:</option>\n                            <option value=\"toast\">:TOAST:</option>\n                            <option value=\"clapping\">:CLAPPING:</option>\n                            <option value=\"mind_blown\">:MIND_BLOWN:</option>\n                        </select>\n                        <div/>\n                    </div>\n                </div>\n                <div className=\"column\">\n                    <div className=\"step\">3. GENERATE EMOJI</div>\n                    <Link className=\"caption\" to=\"/how-to-upload-an-emoji\">how do I upload an emoji to slack?</Link>\n                    <div className=\"button-holder\">\n                        { this.getContent() }\n                    </div>\n                </div>\n            </main>\n        );\n\n        return (\n            <Router>\n              <div className=\"App\">\n                <header className=\"header\">\n                    <Link className=\"title\" to=\"/\">\n                        slackoff.\n                    </Link>\n                </header>\n                  <Masonry>\n                      {\n                        this.state.imageUrls.map(url => <img src={url} style={{width: 300}} />)\n                    }\n                  </Masonry>\n              </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/khaled.6a36f159.png\";"],"sourceRoot":""}